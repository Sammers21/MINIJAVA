//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MiniJavaGram.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class MiniJavaGramParser : Parser {
	public const int
		T__0=1, T__1=2, RETURN=3, CLASS=4, STATIC=5, DOUBLE=6, STRING=7, VOID=8, 
		ENUM=9, PUBLIC=10, FOR=11, DOUBLE_QUOTE=12, ARRAYSQARES=13, COMMETSLASH=14, 
		SYSTEMOUTPRINTLN=15, MULT=16, ASSIGN=17, OBRACE=18, CBRACE=19, DT=20, 
		DC=21, COMMA=22, DOT=23, LBRACKET=24, RBRACKET=25, PASS=26, DIGIT=27, 
		ID=28, WS=29;
	public const int
		RULE_prog = 0, RULE_classBody = 1, RULE_enumdeclar = 2, RULE_main = 3, 
		RULE_otherMthod = 4, RULE_args = 5, RULE_exprassion = 6, RULE_arraydeclaration = 7, 
		RULE_varible = 8, RULE_doubleVal = 9, RULE_doubleArr = 10, RULE_operator = 11, 
		RULE_string = 12, RULE_stringArgs = 13;
	public static readonly string[] ruleNames = {
		"prog", "classBody", "enumdeclar", "main", "otherMthod", "args", "exprassion", 
		"arraydeclaration", "varible", "doubleVal", "doubleArr", "operator", "string", 
		"stringArgs"
	};

	private static readonly string[] _LiteralNames = {
		null, "'main'", "' args'", "'return'", "'class'", "'static'", "'double'", 
		"'String'", "'void'", "'enum'", "'public'", "'for'", "'\"'", "'[]'", "'//'", 
		"'System.out.println'", "'*'", "'='", "'{'", "'}'", "':'", "';'", "','", 
		"'.'", "'('", "')'", "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "RETURN", "CLASS", "STATIC", "DOUBLE", "STRING", "VOID", 
		"ENUM", "PUBLIC", "FOR", "DOUBLE_QUOTE", "ARRAYSQARES", "COMMETSLASH", 
		"SYSTEMOUTPRINTLN", "MULT", "ASSIGN", "OBRACE", "CBRACE", "DT", "DC", 
		"COMMA", "DOT", "LBRACKET", "RBRACKET", "PASS", "DIGIT", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniJavaGram.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MiniJavaGramParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(MiniJavaGramParser.CLASS, 0); }
		public ITerminalNode ID() { return GetToken(MiniJavaGramParser.ID, 0); }
		public ITerminalNode OBRACE() { return GetToken(MiniJavaGramParser.OBRACE, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ITerminalNode CBRACE() { return GetToken(MiniJavaGramParser.CBRACE, 0); }
		public ITerminalNode[] PASS() { return GetTokens(MiniJavaGramParser.PASS); }
		public ITerminalNode PASS(int i) {
			return GetToken(MiniJavaGramParser.PASS, i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; Match(CLASS);
			State = 30;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 29; Match(PASS);
				}
				}
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==PASS );
			State = 34; Match(ID);
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 35; Match(PASS);
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==PASS );
			State = 40; Match(OBRACE);
			State = 41; classBody();
			State = 42; Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ITerminalNode[] COMMETSLASH() { return GetTokens(MiniJavaGramParser.COMMETSLASH); }
		public ITerminalNode COMMETSLASH(int i) {
			return GetToken(MiniJavaGramParser.COMMETSLASH, i);
		}
		public OtherMthodContext[] otherMthod() {
			return GetRuleContexts<OtherMthodContext>();
		}
		public OtherMthodContext otherMthod(int i) {
			return GetRuleContext<OtherMthodContext>(i);
		}
		public EnumdeclarContext[] enumdeclar() {
			return GetRuleContexts<EnumdeclarContext>();
		}
		public EnumdeclarContext enumdeclar(int i) {
			return GetRuleContext<EnumdeclarContext>(i);
		}
		public MainContext main() {
			return GetRuleContext<MainContext>(0);
		}
		public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		public ITerminalNode[] ID() { return GetTokens(MiniJavaGramParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(MiniJavaGramParser.ID, i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_classBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 59;
					switch (TokenStream.La(1)) {
					case COMMETSLASH:
						{
						State = 44; Match(COMMETSLASH);
						State = 48;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
						while (_la==DOUBLE_QUOTE) {
							{
							{
							State = 45; @string();
							}
							}
							State = 50;
							ErrorHandler.Sync(this);
							_la = TokenStream.La(1);
						}
						State = 54;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
						while (_la==ID) {
							{
							{
							State = 51; Match(ID);
							}
							}
							State = 56;
							ErrorHandler.Sync(this);
							_la = TokenStream.La(1);
						}
						}
						break;
					case PUBLIC:
						{
						State = 57; otherMthod();
						}
						break;
					case ENUM:
						{
						State = 58; enumdeclar();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 63;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 64; main();
				}
				break;
			}
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ENUM) | (1L << PUBLIC) | (1L << COMMETSLASH))) != 0)) {
				{
				State = 82;
				switch (TokenStream.La(1)) {
				case PUBLIC:
					{
					State = 67; otherMthod();
					}
					break;
				case ENUM:
					{
					State = 68; enumdeclar();
					}
					break;
				case COMMETSLASH:
					{
					State = 69; Match(COMMETSLASH);
					State = 73;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==DOUBLE_QUOTE) {
						{
						{
						State = 70; @string();
						}
						}
						State = 75;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 79;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==ID) {
						{
						{
						State = 76; Match(ID);
						}
						}
						State = 81;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumdeclarContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(MiniJavaGramParser.ENUM, 0); }
		public ITerminalNode[] ID() { return GetTokens(MiniJavaGramParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(MiniJavaGramParser.ID, i);
		}
		public ITerminalNode OBRACE() { return GetToken(MiniJavaGramParser.OBRACE, 0); }
		public ITerminalNode CBRACE() { return GetToken(MiniJavaGramParser.CBRACE, 0); }
		public ITerminalNode[] PASS() { return GetTokens(MiniJavaGramParser.PASS); }
		public ITerminalNode PASS(int i) {
			return GetToken(MiniJavaGramParser.PASS, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MiniJavaGramParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MiniJavaGramParser.COMMA, i);
		}
		public EnumdeclarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumdeclar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.EnterEnumdeclar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.ExitEnumdeclar(this);
		}
	}

	[RuleVersion(0)]
	public EnumdeclarContext enumdeclar() {
		EnumdeclarContext _localctx = new EnumdeclarContext(Context, State);
		EnterRule(_localctx, 4, RULE_enumdeclar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; Match(ENUM);
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 88; Match(PASS);
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==PASS );
			State = 93; Match(ID);
			State = 94; Match(OBRACE);
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==PASS || _la==ID) {
				{
				{
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==PASS) {
					{
					{
					State = 95; Match(PASS);
					}
					}
					State = 100;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 101; Match(ID);
				State = 103;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 102; Match(COMMA);
					}
				}

				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 110; Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(MiniJavaGramParser.PUBLIC, 0); }
		public ITerminalNode STATIC() { return GetToken(MiniJavaGramParser.STATIC, 0); }
		public ITerminalNode VOID() { return GetToken(MiniJavaGramParser.VOID, 0); }
		public ITerminalNode LBRACKET() { return GetToken(MiniJavaGramParser.LBRACKET, 0); }
		public StringArgsContext stringArgs() {
			return GetRuleContext<StringArgsContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(MiniJavaGramParser.RBRACKET, 0); }
		public ITerminalNode OBRACE() { return GetToken(MiniJavaGramParser.OBRACE, 0); }
		public ITerminalNode CBRACE() { return GetToken(MiniJavaGramParser.CBRACE, 0); }
		public ITerminalNode[] PASS() { return GetTokens(MiniJavaGramParser.PASS); }
		public ITerminalNode PASS(int i) {
			return GetToken(MiniJavaGramParser.PASS, i);
		}
		public ExprassionContext[] exprassion() {
			return GetRuleContexts<ExprassionContext>();
		}
		public ExprassionContext exprassion(int i) {
			return GetRuleContext<ExprassionContext>(i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(Context, State);
		EnterRule(_localctx, 6, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(PUBLIC);
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 113; Match(PASS);
				}
				}
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==PASS );
			State = 118; Match(STATIC);
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 119; Match(PASS);
				}
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==PASS );
			State = 124; Match(VOID);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 125; Match(PASS);
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==PASS );
			State = 130; Match(T__0);
			State = 131; Match(LBRACKET);
			State = 132; stringArgs();
			State = 133; Match(RBRACKET);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 134; Match(PASS);
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==PASS );
			State = 139; Match(OBRACE);
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RETURN) | (1L << DOUBLE) | (1L << FOR) | (1L << COMMETSLASH) | (1L << SYSTEMOUTPRINTLN))) != 0)) {
				{
				{
				State = 140; exprassion();
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 146; Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherMthodContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(MiniJavaGramParser.PUBLIC, 0); }
		public ITerminalNode STATIC() { return GetToken(MiniJavaGramParser.STATIC, 0); }
		public ITerminalNode ID() { return GetToken(MiniJavaGramParser.ID, 0); }
		public ITerminalNode LBRACKET() { return GetToken(MiniJavaGramParser.LBRACKET, 0); }
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(MiniJavaGramParser.RBRACKET, 0); }
		public ITerminalNode OBRACE() { return GetToken(MiniJavaGramParser.OBRACE, 0); }
		public ITerminalNode CBRACE() { return GetToken(MiniJavaGramParser.CBRACE, 0); }
		public ITerminalNode DOUBLE() { return GetToken(MiniJavaGramParser.DOUBLE, 0); }
		public ITerminalNode VOID() { return GetToken(MiniJavaGramParser.VOID, 0); }
		public ITerminalNode[] PASS() { return GetTokens(MiniJavaGramParser.PASS); }
		public ITerminalNode PASS(int i) {
			return GetToken(MiniJavaGramParser.PASS, i);
		}
		public ExprassionContext[] exprassion() {
			return GetRuleContexts<ExprassionContext>();
		}
		public ExprassionContext exprassion(int i) {
			return GetRuleContext<ExprassionContext>(i);
		}
		public OtherMthodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherMthod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.EnterOtherMthod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.ExitOtherMthod(this);
		}
	}

	[RuleVersion(0)]
	public OtherMthodContext otherMthod() {
		OtherMthodContext _localctx = new OtherMthodContext(Context, State);
		EnterRule(_localctx, 8, RULE_otherMthod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(PUBLIC);
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 149; Match(PASS);
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==PASS );
			State = 154; Match(STATIC);
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 155; Match(PASS);
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==PASS );
			State = 160;
			_la = TokenStream.La(1);
			if ( !(_la==DOUBLE || _la==VOID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 161; Match(PASS);
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==PASS );
			State = 166; Match(ID);
			State = 167; Match(LBRACKET);
			State = 168; args();
			State = 169; Match(RBRACKET);
			State = 170; Match(OBRACE);
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RETURN) | (1L << DOUBLE) | (1L << FOR) | (1L << COMMETSLASH) | (1L << SYSTEMOUTPRINTLN))) != 0)) {
				{
				{
				State = 171; exprassion();
				}
				}
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 177; Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ITerminalNode[] DOUBLE() { return GetTokens(MiniJavaGramParser.DOUBLE); }
		public ITerminalNode DOUBLE(int i) {
			return GetToken(MiniJavaGramParser.DOUBLE, i);
		}
		public ITerminalNode[] ID() { return GetTokens(MiniJavaGramParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(MiniJavaGramParser.ID, i);
		}
		public ITerminalNode[] PASS() { return GetTokens(MiniJavaGramParser.PASS); }
		public ITerminalNode PASS(int i) {
			return GetToken(MiniJavaGramParser.PASS, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MiniJavaGramParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MiniJavaGramParser.COMMA, i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 10, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOUBLE) {
				{
				{
				State = 179; Match(DOUBLE);
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 180; Match(PASS);
					}
					}
					State = 183;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==PASS );
				State = 185; Match(ID);
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==PASS) {
					{
					{
					State = 186; Match(PASS);
					}
					}
					State = 191;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 193;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 192; Match(COMMA);
					}
				}

				}
				}
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprassionContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(MiniJavaGramParser.RETURN, 0); }
		public VaribleContext[] varible() {
			return GetRuleContexts<VaribleContext>();
		}
		public VaribleContext varible(int i) {
			return GetRuleContext<VaribleContext>(i);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public ITerminalNode DC() { return GetToken(MiniJavaGramParser.DC, 0); }
		public ITerminalNode[] PASS() { return GetTokens(MiniJavaGramParser.PASS); }
		public ITerminalNode PASS(int i) {
			return GetToken(MiniJavaGramParser.PASS, i);
		}
		public ITerminalNode SYSTEMOUTPRINTLN() { return GetToken(MiniJavaGramParser.SYSTEMOUTPRINTLN, 0); }
		public ITerminalNode[] LBRACKET() { return GetTokens(MiniJavaGramParser.LBRACKET); }
		public ITerminalNode LBRACKET(int i) {
			return GetToken(MiniJavaGramParser.LBRACKET, i);
		}
		public ITerminalNode[] RBRACKET() { return GetTokens(MiniJavaGramParser.RBRACKET); }
		public ITerminalNode RBRACKET(int i) {
			return GetToken(MiniJavaGramParser.RBRACKET, i);
		}
		public ITerminalNode[] ID() { return GetTokens(MiniJavaGramParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(MiniJavaGramParser.ID, i);
		}
		public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(MiniJavaGramParser.DOT, 0); }
		public ArraydeclarationContext arraydeclaration() {
			return GetRuleContext<ArraydeclarationContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(MiniJavaGramParser.FOR, 0); }
		public ITerminalNode DOUBLE() { return GetToken(MiniJavaGramParser.DOUBLE, 0); }
		public ITerminalNode DT() { return GetToken(MiniJavaGramParser.DT, 0); }
		public ITerminalNode OBRACE() { return GetToken(MiniJavaGramParser.OBRACE, 0); }
		public ITerminalNode CBRACE() { return GetToken(MiniJavaGramParser.CBRACE, 0); }
		public ExprassionContext[] exprassion() {
			return GetRuleContexts<ExprassionContext>();
		}
		public ExprassionContext exprassion(int i) {
			return GetRuleContext<ExprassionContext>(i);
		}
		public ITerminalNode COMMETSLASH() { return GetToken(MiniJavaGramParser.COMMETSLASH, 0); }
		public ExprassionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprassion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.EnterExprassion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.ExitExprassion(this);
		}
	}

	[RuleVersion(0)]
	public ExprassionContext exprassion() {
		ExprassionContext _localctx = new ExprassionContext(Context, State);
		EnterRule(_localctx, 12, RULE_exprassion);
		int _la;
		try {
			State = 284;
			switch (TokenStream.La(1)) {
			case RETURN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200; Match(RETURN);
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 201; Match(PASS);
					}
					}
					State = 204;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==PASS );
				State = 206; varible();
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==PASS) {
					{
					{
					State = 207; Match(PASS);
					}
					}
					State = 212;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 213; @operator();
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==PASS) {
					{
					{
					State = 214; Match(PASS);
					}
					}
					State = 219;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 220; varible();
				State = 221; Match(DC);
				}
				break;
			case SYSTEMOUTPRINTLN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 223; Match(SYSTEMOUTPRINTLN);
				State = 224; Match(LBRACKET);
				State = 234;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 225; Match(ID);
					State = 226; Match(LBRACKET);
					State = 227; Match(ID);
					State = 228; Match(RBRACKET);
					}
					break;
				case 2:
					{
					State = 229; Match(ID);
					}
					break;
				case 3:
					{
					State = 230; @string();
					}
					break;
				case 4:
					{
					State = 231; Match(ID);
					State = 232; Match(DOT);
					State = 233; Match(ID);
					}
					break;
				}
				State = 236; Match(RBRACKET);
				State = 237; Match(DC);
				}
				break;
			case DOUBLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 238; arraydeclaration();
				State = 239; Match(DC);
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 241; Match(FOR);
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 242; Match(PASS);
					}
					}
					State = 245;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==PASS );
				State = 247; Match(LBRACKET);
				State = 248; Match(DOUBLE);
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 249; Match(PASS);
					}
					}
					State = 252;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==PASS );
				State = 254; Match(ID);
				State = 255; Match(DT);
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 256; Match(PASS);
					}
					}
					State = 259;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==PASS );
				State = 261; Match(ID);
				State = 262; Match(RBRACKET);
				State = 263; Match(OBRACE);
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RETURN) | (1L << DOUBLE) | (1L << FOR) | (1L << COMMETSLASH) | (1L << SYSTEMOUTPRINTLN))) != 0)) {
					{
					{
					State = 264; exprassion();
					}
					}
					State = 269;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 270; Match(CBRACE);
				}
				break;
			case COMMETSLASH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 271; Match(COMMETSLASH);
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOUBLE_QUOTE) {
					{
					{
					State = 272; @string();
					}
					}
					State = 277;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==ID) {
					{
					{
					State = 278; Match(ID);
					}
					}
					State = 283;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraydeclarationContext : ParserRuleContext {
		public ITerminalNode DOUBLE() { return GetToken(MiniJavaGramParser.DOUBLE, 0); }
		public ITerminalNode ARRAYSQARES() { return GetToken(MiniJavaGramParser.ARRAYSQARES, 0); }
		public ITerminalNode ID() { return GetToken(MiniJavaGramParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(MiniJavaGramParser.ASSIGN, 0); }
		public DoubleArrContext doubleArr() {
			return GetRuleContext<DoubleArrContext>(0);
		}
		public ITerminalNode[] PASS() { return GetTokens(MiniJavaGramParser.PASS); }
		public ITerminalNode PASS(int i) {
			return GetToken(MiniJavaGramParser.PASS, i);
		}
		public ArraydeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraydeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.EnterArraydeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.ExitArraydeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ArraydeclarationContext arraydeclaration() {
		ArraydeclarationContext _localctx = new ArraydeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_arraydeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; Match(DOUBLE);
			State = 287; Match(ARRAYSQARES);
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 288; Match(PASS);
				}
				}
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==PASS );
			State = 293; Match(ID);
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==PASS) {
				{
				{
				State = 294; Match(PASS);
				}
				}
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 300; Match(ASSIGN);
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==PASS) {
				{
				{
				State = 301; Match(PASS);
				}
				}
				State = 306;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 307; doubleArr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaribleContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MiniJavaGramParser.ID, 0); }
		public DoubleValContext doubleVal() {
			return GetRuleContext<DoubleValContext>(0);
		}
		public VaribleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varible; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.EnterVarible(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.ExitVarible(this);
		}
	}

	[RuleVersion(0)]
	public VaribleContext varible() {
		VaribleContext _localctx = new VaribleContext(Context, State);
		EnterRule(_localctx, 16, RULE_varible);
		try {
			State = 311;
			switch (TokenStream.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 309; Match(ID);
				}
				break;
			case DIGIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310; doubleVal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleValContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(MiniJavaGramParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(MiniJavaGramParser.DIGIT, i);
		}
		public ITerminalNode DOT() { return GetToken(MiniJavaGramParser.DOT, 0); }
		public DoubleValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doubleVal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.EnterDoubleVal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.ExitDoubleVal(this);
		}
	}

	[RuleVersion(0)]
	public DoubleValContext doubleVal() {
		DoubleValContext _localctx = new DoubleValContext(Context, State);
		EnterRule(_localctx, 18, RULE_doubleVal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313; Match(DIGIT);
			State = 314; Match(DOT);
			State = 315; Match(DIGIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleArrContext : ParserRuleContext {
		public ITerminalNode OBRACE() { return GetToken(MiniJavaGramParser.OBRACE, 0); }
		public ITerminalNode CBRACE() { return GetToken(MiniJavaGramParser.CBRACE, 0); }
		public DoubleValContext[] doubleVal() {
			return GetRuleContexts<DoubleValContext>();
		}
		public DoubleValContext doubleVal(int i) {
			return GetRuleContext<DoubleValContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MiniJavaGramParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MiniJavaGramParser.COMMA, i);
		}
		public DoubleArrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doubleArr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.EnterDoubleArr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.ExitDoubleArr(this);
		}
	}

	[RuleVersion(0)]
	public DoubleArrContext doubleArr() {
		DoubleArrContext _localctx = new DoubleArrContext(Context, State);
		EnterRule(_localctx, 20, RULE_doubleArr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317; Match(OBRACE);
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DIGIT) {
				{
				{
				State = 318; doubleVal();
				State = 320;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 319; Match(COMMA);
					}
				}

				}
				}
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 327; Match(CBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public ITerminalNode ASSIGN() { return GetToken(MiniJavaGramParser.ASSIGN, 0); }
		public ITerminalNode MULT() { return GetToken(MiniJavaGramParser.MULT, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 22, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			_la = TokenStream.La(1);
			if ( !(_la==MULT || _la==ASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode[] DOUBLE_QUOTE() { return GetTokens(MiniJavaGramParser.DOUBLE_QUOTE); }
		public ITerminalNode DOUBLE_QUOTE(int i) {
			return GetToken(MiniJavaGramParser.DOUBLE_QUOTE, i);
		}
		public ITerminalNode[] ID() { return GetTokens(MiniJavaGramParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(MiniJavaGramParser.ID, i);
		}
		public ITerminalNode[] PASS() { return GetTokens(MiniJavaGramParser.PASS); }
		public ITerminalNode PASS(int i) {
			return GetToken(MiniJavaGramParser.PASS, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(MiniJavaGramParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(MiniJavaGramParser.DOT, i);
		}
		public ITerminalNode[] DT() { return GetTokens(MiniJavaGramParser.DT); }
		public ITerminalNode DT(int i) {
			return GetToken(MiniJavaGramParser.DT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(MiniJavaGramParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MiniJavaGramParser.COMMA, i);
		}
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 24, RULE_string);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 331; Match(DOUBLE_QUOTE);
			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==ID) {
				{
				State = 370;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 332; Match(ID);
					State = 336;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
						if ( _alt==1 ) {
							{
							{
							State = 333; Match(PASS);
							}
							} 
						}
						State = 338;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
					}
					State = 342;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==DOT) {
						{
						{
						State = 339; Match(DOT);
						}
						}
						State = 344;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 348;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==DT) {
						{
						{
						State = 345; Match(DT);
						}
						}
						State = 350;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 354;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==COMMA) {
						{
						{
						State = 351; Match(COMMA);
						}
						}
						State = 356;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 360;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==PASS) {
						{
						{
						State = 357; Match(PASS);
						}
						}
						State = 362;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					}
					break;
				case 2:
					{
					State = 363; Match(ID);
					State = 367;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==DOT) {
						{
						{
						State = 364; Match(DOT);
						}
						}
						State = 369;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					}
					break;
				}
				}
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 375; Match(DOUBLE_QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringArgsContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(MiniJavaGramParser.STRING, 0); }
		public ITerminalNode ARRAYSQARES() { return GetToken(MiniJavaGramParser.ARRAYSQARES, 0); }
		public StringArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringArgs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.EnterStringArgs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMiniJavaGramListener typedListener = listener as IMiniJavaGramListener;
			if (typedListener != null) typedListener.ExitStringArgs(this);
		}
	}

	[RuleVersion(0)]
	public StringArgsContext stringArgs() {
		StringArgsContext _localctx = new StringArgsContext(Context, State);
		EnterRule(_localctx, 26, RULE_stringArgs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; Match(STRING);
			State = 378; Match(ARRAYSQARES);
			State = 379; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x1F");
		sb.Append("\x180\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x3\x2\x3\x2\x6\x2!\n\x2\r\x2\xE\x2");
		sb.Append("\"\x3\x2\x3\x2\x6\x2\'\n\x2\r\x2\xE\x2(\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x3\x3\x3\a\x3\x31\n\x3\f\x3\xE\x3\x34\v\x3\x3\x3\a\x3");
		sb.Append("\x37\n\x3\f\x3\xE\x3:\v\x3\x3\x3\x3\x3\a\x3>\n\x3\f\x3\xE\x3");
		sb.Append("\x41\v\x3\x3\x3\x5\x3\x44\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3");
		sb.Append("J\n\x3\f\x3\xE\x3M\v\x3\x3\x3\a\x3P\n\x3\f\x3\xE\x3S\v\x3\a");
		sb.Append("\x3U\n\x3\f\x3\xE\x3X\v\x3\x3\x4\x3\x4\x6\x4\\\n\x4\r\x4\xE");
		sb.Append("\x4]\x3\x4\x3\x4\x3\x4\a\x4\x63\n\x4\f\x4\xE\x4\x66\v\x4\x3");
		sb.Append("\x4\x3\x4\x5\x4j\n\x4\a\x4l\n\x4\f\x4\xE\x4o\v\x4\x3\x4\x3\x4");
		sb.Append("\x3\x5\x3\x5\x6\x5u\n\x5\r\x5\xE\x5v\x3\x5\x3\x5\x6\x5{\n\x5");
		sb.Append("\r\x5\xE\x5|\x3\x5\x3\x5\x6\x5\x81\n\x5\r\x5\xE\x5\x82\x3\x5");
		sb.Append("\x3\x5\x3\x5\x3\x5\x3\x5\x6\x5\x8A\n\x5\r\x5\xE\x5\x8B\x3\x5");
		sb.Append("\x3\x5\a\x5\x90\n\x5\f\x5\xE\x5\x93\v\x5\x3\x5\x3\x5\x3\x6\x3");
		sb.Append("\x6\x6\x6\x99\n\x6\r\x6\xE\x6\x9A\x3\x6\x3\x6\x6\x6\x9F\n\x6");
		sb.Append("\r\x6\xE\x6\xA0\x3\x6\x3\x6\x6\x6\xA5\n\x6\r\x6\xE\x6\xA6\x3");
		sb.Append("\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\xAF\n\x6\f\x6\xE\x6\xB2");
		sb.Append("\v\x6\x3\x6\x3\x6\x3\a\x3\a\x6\a\xB8\n\a\r\a\xE\a\xB9\x3\a\x3");
		sb.Append("\a\a\a\xBE\n\a\f\a\xE\a\xC1\v\a\x3\a\x5\a\xC4\n\a\a\a\xC6\n");
		sb.Append("\a\f\a\xE\a\xC9\v\a\x3\b\x3\b\x6\b\xCD\n\b\r\b\xE\b\xCE\x3\b");
		sb.Append("\x3\b\a\b\xD3\n\b\f\b\xE\b\xD6\v\b\x3\b\x3\b\a\b\xDA\n\b\f\b");
		sb.Append("\xE\b\xDD\v\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3");
		sb.Append("\b\x3\b\x3\b\x3\b\x3\b\x5\b\xED\n\b\x3\b\x3\b\x3\b\x3\b\x3\b");
		sb.Append("\x3\b\x3\b\x6\b\xF6\n\b\r\b\xE\b\xF7\x3\b\x3\b\x3\b\x6\b\xFD");
		sb.Append("\n\b\r\b\xE\b\xFE\x3\b\x3\b\x3\b\x6\b\x104\n\b\r\b\xE\b\x105");
		sb.Append("\x3\b\x3\b\x3\b\x3\b\a\b\x10C\n\b\f\b\xE\b\x10F\v\b\x3\b\x3");
		sb.Append("\b\x3\b\a\b\x114\n\b\f\b\xE\b\x117\v\b\x3\b\a\b\x11A\n\b\f\b");
		sb.Append("\xE\b\x11D\v\b\x5\b\x11F\n\b\x3\t\x3\t\x3\t\x6\t\x124\n\t\r");
		sb.Append("\t\xE\t\x125\x3\t\x3\t\a\t\x12A\n\t\f\t\xE\t\x12D\v\t\x3\t\x3");
		sb.Append("\t\a\t\x131\n\t\f\t\xE\t\x134\v\t\x3\t\x3\t\x3\n\x3\n\x5\n\x13A");
		sb.Append("\n\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x5\f\x143\n\f\a\f\x145");
		sb.Append("\n\f\f\f\xE\f\x148\v\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE");
		sb.Append("\a\xE\x151\n\xE\f\xE\xE\xE\x154\v\xE\x3\xE\a\xE\x157\n\xE\f");
		sb.Append("\xE\xE\xE\x15A\v\xE\x3\xE\a\xE\x15D\n\xE\f\xE\xE\xE\x160\v\xE");
		sb.Append("\x3\xE\a\xE\x163\n\xE\f\xE\xE\xE\x166\v\xE\x3\xE\a\xE\x169\n");
		sb.Append("\xE\f\xE\xE\xE\x16C\v\xE\x3\xE\x3\xE\a\xE\x170\n\xE\f\xE\xE");
		sb.Append("\xE\x173\v\xE\a\xE\x175\n\xE\f\xE\xE\xE\x178\v\xE\x3\xE\x3\xE");
		sb.Append("\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x2\x2\x10\x2\x4\x6\b\n\f\xE\x10");
		sb.Append("\x12\x14\x16\x18\x1A\x1C\x2\x4\x4\x2\b\b\n\n\x3\x2\x12\x13\x1AD");
		sb.Append("\x2\x1E\x3\x2\x2\x2\x4?\x3\x2\x2\x2\x6Y\x3\x2\x2\x2\br\x3\x2");
		sb.Append("\x2\x2\n\x96\x3\x2\x2\x2\f\xC7\x3\x2\x2\x2\xE\x11E\x3\x2\x2");
		sb.Append("\x2\x10\x120\x3\x2\x2\x2\x12\x139\x3\x2\x2\x2\x14\x13B\x3\x2");
		sb.Append("\x2\x2\x16\x13F\x3\x2\x2\x2\x18\x14B\x3\x2\x2\x2\x1A\x14D\x3");
		sb.Append("\x2\x2\x2\x1C\x17B\x3\x2\x2\x2\x1E \a\x6\x2\x2\x1F!\a\x1C\x2");
		sb.Append("\x2 \x1F\x3\x2\x2\x2!\"\x3\x2\x2\x2\" \x3\x2\x2\x2\"#\x3\x2");
		sb.Append("\x2\x2#$\x3\x2\x2\x2$&\a\x1E\x2\x2%\'\a\x1C\x2\x2&%\x3\x2\x2");
		sb.Append("\x2\'(\x3\x2\x2\x2(&\x3\x2\x2\x2()\x3\x2\x2\x2)*\x3\x2\x2\x2");
		sb.Append("*+\a\x14\x2\x2+,\x5\x4\x3\x2,-\a\x15\x2\x2-\x3\x3\x2\x2\x2.");
		sb.Append("\x32\a\x10\x2\x2/\x31\x5\x1A\xE\x2\x30/\x3\x2\x2\x2\x31\x34");
		sb.Append("\x3\x2\x2\x2\x32\x30\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2\x33\x38");
		sb.Append("\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x35\x37\a\x1E\x2\x2\x36\x35");
		sb.Append("\x3\x2\x2\x2\x37:\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x38\x39\x3");
		sb.Append("\x2\x2\x2\x39>\x3\x2\x2\x2:\x38\x3\x2\x2\x2;>\x5\n\x6\x2<>\x5");
		sb.Append("\x6\x4\x2=.\x3\x2\x2\x2=;\x3\x2\x2\x2=<\x3\x2\x2\x2>\x41\x3");
		sb.Append("\x2\x2\x2?=\x3\x2\x2\x2?@\x3\x2\x2\x2@\x43\x3\x2\x2\x2\x41?");
		sb.Append("\x3\x2\x2\x2\x42\x44\x5\b\x5\x2\x43\x42\x3\x2\x2\x2\x43\x44");
		sb.Append("\x3\x2\x2\x2\x44V\x3\x2\x2\x2\x45U\x5\n\x6\x2\x46U\x5\x6\x4");
		sb.Append("\x2GK\a\x10\x2\x2HJ\x5\x1A\xE\x2IH\x3\x2\x2\x2JM\x3\x2\x2\x2");
		sb.Append("KI\x3\x2\x2\x2KL\x3\x2\x2\x2LQ\x3\x2\x2\x2MK\x3\x2\x2\x2NP\a");
		sb.Append("\x1E\x2\x2ON\x3\x2\x2\x2PS\x3\x2\x2\x2QO\x3\x2\x2\x2QR\x3\x2");
		sb.Append("\x2\x2RU\x3\x2\x2\x2SQ\x3\x2\x2\x2T\x45\x3\x2\x2\x2T\x46\x3");
		sb.Append("\x2\x2\x2TG\x3\x2\x2\x2UX\x3\x2\x2\x2VT\x3\x2\x2\x2VW\x3\x2");
		sb.Append("\x2\x2W\x5\x3\x2\x2\x2XV\x3\x2\x2\x2Y[\a\v\x2\x2Z\\\a\x1C\x2");
		sb.Append("\x2[Z\x3\x2\x2\x2\\]\x3\x2\x2\x2][\x3\x2\x2\x2]^\x3\x2\x2\x2");
		sb.Append("^_\x3\x2\x2\x2_`\a\x1E\x2\x2`m\a\x14\x2\x2\x61\x63\a\x1C\x2");
		sb.Append("\x2\x62\x61\x3\x2\x2\x2\x63\x66\x3\x2\x2\x2\x64\x62\x3\x2\x2");
		sb.Append("\x2\x64\x65\x3\x2\x2\x2\x65g\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2");
		sb.Append("gi\a\x1E\x2\x2hj\a\x18\x2\x2ih\x3\x2\x2\x2ij\x3\x2\x2\x2jl\x3");
		sb.Append("\x2\x2\x2k\x64\x3\x2\x2\x2lo\x3\x2\x2\x2mk\x3\x2\x2\x2mn\x3");
		sb.Append("\x2\x2\x2np\x3\x2\x2\x2om\x3\x2\x2\x2pq\a\x15\x2\x2q\a\x3\x2");
		sb.Append("\x2\x2rt\a\f\x2\x2su\a\x1C\x2\x2ts\x3\x2\x2\x2uv\x3\x2\x2\x2");
		sb.Append("vt\x3\x2\x2\x2vw\x3\x2\x2\x2wx\x3\x2\x2\x2xz\a\a\x2\x2y{\a\x1C");
		sb.Append("\x2\x2zy\x3\x2\x2\x2{|\x3\x2\x2\x2|z\x3\x2\x2\x2|}\x3\x2\x2");
		sb.Append("\x2}~\x3\x2\x2\x2~\x80\a\n\x2\x2\x7F\x81\a\x1C\x2\x2\x80\x7F");
		sb.Append("\x3\x2\x2\x2\x81\x82\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x82\x83");
		sb.Append("\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x85\a\x3\x2\x2\x85\x86");
		sb.Append("\a\x1A\x2\x2\x86\x87\x5\x1C\xF\x2\x87\x89\a\x1B\x2\x2\x88\x8A");
		sb.Append("\a\x1C\x2\x2\x89\x88\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x89");
		sb.Append("\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x91");
		sb.Append("\a\x14\x2\x2\x8E\x90\x5\xE\b\x2\x8F\x8E\x3\x2\x2\x2\x90\x93");
		sb.Append("\x3\x2\x2\x2\x91\x8F\x3\x2\x2\x2\x91\x92\x3\x2\x2\x2\x92\x94");
		sb.Append("\x3\x2\x2\x2\x93\x91\x3\x2\x2\x2\x94\x95\a\x15\x2\x2\x95\t\x3");
		sb.Append("\x2\x2\x2\x96\x98\a\f\x2\x2\x97\x99\a\x1C\x2\x2\x98\x97\x3\x2");
		sb.Append("\x2\x2\x99\x9A\x3\x2\x2\x2\x9A\x98\x3\x2\x2\x2\x9A\x9B\x3\x2");
		sb.Append("\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9E\a\a\x2\x2\x9D\x9F\a\x1C\x2");
		sb.Append("\x2\x9E\x9D\x3\x2\x2\x2\x9F\xA0\x3\x2\x2\x2\xA0\x9E\x3\x2\x2");
		sb.Append("\x2\xA0\xA1\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA4\t\x2\x2");
		sb.Append("\x2\xA3\xA5\a\x1C\x2\x2\xA4\xA3\x3\x2\x2\x2\xA5\xA6\x3\x2\x2");
		sb.Append("\x2\xA6\xA4\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2\xA7\xA8\x3\x2\x2");
		sb.Append("\x2\xA8\xA9\a\x1E\x2\x2\xA9\xAA\a\x1A\x2\x2\xAA\xAB\x5\f\a\x2");
		sb.Append("\xAB\xAC\a\x1B\x2\x2\xAC\xB0\a\x14\x2\x2\xAD\xAF\x5\xE\b\x2");
		sb.Append("\xAE\xAD\x3\x2\x2\x2\xAF\xB2\x3\x2\x2\x2\xB0\xAE\x3\x2\x2\x2");
		sb.Append("\xB0\xB1\x3\x2\x2\x2\xB1\xB3\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2");
		sb.Append("\xB3\xB4\a\x15\x2\x2\xB4\v\x3\x2\x2\x2\xB5\xB7\a\b\x2\x2\xB6");
		sb.Append("\xB8\a\x1C\x2\x2\xB7\xB6\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9");
		sb.Append("\xB7\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB");
		sb.Append("\xBF\a\x1E\x2\x2\xBC\xBE\a\x1C\x2\x2\xBD\xBC\x3\x2\x2\x2\xBE");
		sb.Append("\xC1\x3\x2\x2\x2\xBF\xBD\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0");
		sb.Append("\xC3\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC2\xC4\a\x18\x2\x2\xC3");
		sb.Append("\xC2\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\xC6\x3\x2\x2\x2\xC5");
		sb.Append("\xB5\x3\x2\x2\x2\xC6\xC9\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC7");
		sb.Append("\xC8\x3\x2\x2\x2\xC8\r\x3\x2\x2\x2\xC9\xC7\x3\x2\x2\x2\xCA\xCC");
		sb.Append("\a\x5\x2\x2\xCB\xCD\a\x1C\x2\x2\xCC\xCB\x3\x2\x2\x2\xCD\xCE");
		sb.Append("\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCE\xCF\x3\x2\x2\x2\xCF\xD0");
		sb.Append("\x3\x2\x2\x2\xD0\xD4\x5\x12\n\x2\xD1\xD3\a\x1C\x2\x2\xD2\xD1");
		sb.Append("\x3\x2\x2\x2\xD3\xD6\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD4\xD5");
		sb.Append("\x3\x2\x2\x2\xD5\xD7\x3\x2\x2\x2\xD6\xD4\x3\x2\x2\x2\xD7\xDB");
		sb.Append("\x5\x18\r\x2\xD8\xDA\a\x1C\x2\x2\xD9\xD8\x3\x2\x2\x2\xDA\xDD");
		sb.Append("\x3\x2\x2\x2\xDB\xD9\x3\x2\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC\xDE");
		sb.Append("\x3\x2\x2\x2\xDD\xDB\x3\x2\x2\x2\xDE\xDF\x5\x12\n\x2\xDF\xE0");
		sb.Append("\a\x17\x2\x2\xE0\x11F\x3\x2\x2\x2\xE1\xE2\a\x11\x2\x2\xE2\xEC");
		sb.Append("\a\x1A\x2\x2\xE3\xE4\a\x1E\x2\x2\xE4\xE5\a\x1A\x2\x2\xE5\xE6");
		sb.Append("\a\x1E\x2\x2\xE6\xED\a\x1B\x2\x2\xE7\xED\a\x1E\x2\x2\xE8\xED");
		sb.Append("\x5\x1A\xE\x2\xE9\xEA\a\x1E\x2\x2\xEA\xEB\a\x19\x2\x2\xEB\xED");
		sb.Append("\a\x1E\x2\x2\xEC\xE3\x3\x2\x2\x2\xEC\xE7\x3\x2\x2\x2\xEC\xE8");
		sb.Append("\x3\x2\x2\x2\xEC\xE9\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xEF");
		sb.Append("\a\x1B\x2\x2\xEF\x11F\a\x17\x2\x2\xF0\xF1\x5\x10\t\x2\xF1\xF2");
		sb.Append("\a\x17\x2\x2\xF2\x11F\x3\x2\x2\x2\xF3\xF5\a\r\x2\x2\xF4\xF6");
		sb.Append("\a\x1C\x2\x2\xF5\xF4\x3\x2\x2\x2\xF6\xF7\x3\x2\x2\x2\xF7\xF5");
		sb.Append("\x3\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF8\xF9\x3\x2\x2\x2\xF9\xFA");
		sb.Append("\a\x1A\x2\x2\xFA\xFC\a\b\x2\x2\xFB\xFD\a\x1C\x2\x2\xFC\xFB\x3");
		sb.Append("\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\xFC\x3\x2\x2\x2\xFE\xFF\x3");
		sb.Append("\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100\x101\a\x1E\x2\x2\x101\x103");
		sb.Append("\a\x16\x2\x2\x102\x104\a\x1C\x2\x2\x103\x102\x3\x2\x2\x2\x104");
		sb.Append("\x105\x3\x2\x2\x2\x105\x103\x3\x2\x2\x2\x105\x106\x3\x2\x2\x2");
		sb.Append("\x106\x107\x3\x2\x2\x2\x107\x108\a\x1E\x2\x2\x108\x109\a\x1B");
		sb.Append("\x2\x2\x109\x10D\a\x14\x2\x2\x10A\x10C\x5\xE\b\x2\x10B\x10A");
		sb.Append("\x3\x2\x2\x2\x10C\x10F\x3\x2\x2\x2\x10D\x10B\x3\x2\x2\x2\x10D");
		sb.Append("\x10E\x3\x2\x2\x2\x10E\x110\x3\x2\x2\x2\x10F\x10D\x3\x2\x2\x2");
		sb.Append("\x110\x11F\a\x15\x2\x2\x111\x115\a\x10\x2\x2\x112\x114\x5\x1A");
		sb.Append("\xE\x2\x113\x112\x3\x2\x2\x2\x114\x117\x3\x2\x2\x2\x115\x113");
		sb.Append("\x3\x2\x2\x2\x115\x116\x3\x2\x2\x2\x116\x11B\x3\x2\x2\x2\x117");
		sb.Append("\x115\x3\x2\x2\x2\x118\x11A\a\x1E\x2\x2\x119\x118\x3\x2\x2\x2");
		sb.Append("\x11A\x11D\x3\x2\x2\x2\x11B\x119\x3\x2\x2\x2\x11B\x11C\x3\x2");
		sb.Append("\x2\x2\x11C\x11F\x3\x2\x2\x2\x11D\x11B\x3\x2\x2\x2\x11E\xCA");
		sb.Append("\x3\x2\x2\x2\x11E\xE1\x3\x2\x2\x2\x11E\xF0\x3\x2\x2\x2\x11E");
		sb.Append("\xF3\x3\x2\x2\x2\x11E\x111\x3\x2\x2\x2\x11F\xF\x3\x2\x2\x2\x120");
		sb.Append("\x121\a\b\x2\x2\x121\x123\a\xF\x2\x2\x122\x124\a\x1C\x2\x2\x123");
		sb.Append("\x122\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125\x123\x3\x2\x2\x2");
		sb.Append("\x125\x126\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127\x12B\a\x1E");
		sb.Append("\x2\x2\x128\x12A\a\x1C\x2\x2\x129\x128\x3\x2\x2\x2\x12A\x12D");
		sb.Append("\x3\x2\x2\x2\x12B\x129\x3\x2\x2\x2\x12B\x12C\x3\x2\x2\x2\x12C");
		sb.Append("\x12E\x3\x2\x2\x2\x12D\x12B\x3\x2\x2\x2\x12E\x132\a\x13\x2\x2");
		sb.Append("\x12F\x131\a\x1C\x2\x2\x130\x12F\x3\x2\x2\x2\x131\x134\x3\x2");
		sb.Append("\x2\x2\x132\x130\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133\x135");
		sb.Append("\x3\x2\x2\x2\x134\x132\x3\x2\x2\x2\x135\x136\x5\x16\f\x2\x136");
		sb.Append("\x11\x3\x2\x2\x2\x137\x13A\a\x1E\x2\x2\x138\x13A\x5\x14\v\x2");
		sb.Append("\x139\x137\x3\x2\x2\x2\x139\x138\x3\x2\x2\x2\x13A\x13\x3\x2");
		sb.Append("\x2\x2\x13B\x13C\a\x1D\x2\x2\x13C\x13D\a\x19\x2\x2\x13D\x13E");
		sb.Append("\a\x1D\x2\x2\x13E\x15\x3\x2\x2\x2\x13F\x146\a\x14\x2\x2\x140");
		sb.Append("\x142\x5\x14\v\x2\x141\x143\a\x18\x2\x2\x142\x141\x3\x2\x2\x2");
		sb.Append("\x142\x143\x3\x2\x2\x2\x143\x145\x3\x2\x2\x2\x144\x140\x3\x2");
		sb.Append("\x2\x2\x145\x148\x3\x2\x2\x2\x146\x144\x3\x2\x2\x2\x146\x147");
		sb.Append("\x3\x2\x2\x2\x147\x149\x3\x2\x2\x2\x148\x146\x3\x2\x2\x2\x149");
		sb.Append("\x14A\a\x15\x2\x2\x14A\x17\x3\x2\x2\x2\x14B\x14C\t\x3\x2\x2");
		sb.Append("\x14C\x19\x3\x2\x2\x2\x14D\x176\a\xE\x2\x2\x14E\x152\a\x1E\x2");
		sb.Append("\x2\x14F\x151\a\x1C\x2\x2\x150\x14F\x3\x2\x2\x2\x151\x154\x3");
		sb.Append("\x2\x2\x2\x152\x150\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x158");
		sb.Append("\x3\x2\x2\x2\x154\x152\x3\x2\x2\x2\x155\x157\a\x19\x2\x2\x156");
		sb.Append("\x155\x3\x2\x2\x2\x157\x15A\x3\x2\x2\x2\x158\x156\x3\x2\x2\x2");
		sb.Append("\x158\x159\x3\x2\x2\x2\x159\x15E\x3\x2\x2\x2\x15A\x158\x3\x2");
		sb.Append("\x2\x2\x15B\x15D\a\x16\x2\x2\x15C\x15B\x3\x2\x2\x2\x15D\x160");
		sb.Append("\x3\x2\x2\x2\x15E\x15C\x3\x2\x2\x2\x15E\x15F\x3\x2\x2\x2\x15F");
		sb.Append("\x164\x3\x2\x2\x2\x160\x15E\x3\x2\x2\x2\x161\x163\a\x18\x2\x2");
		sb.Append("\x162\x161\x3\x2\x2\x2\x163\x166\x3\x2\x2\x2\x164\x162\x3\x2");
		sb.Append("\x2\x2\x164\x165\x3\x2\x2\x2\x165\x16A\x3\x2\x2\x2\x166\x164");
		sb.Append("\x3\x2\x2\x2\x167\x169\a\x1C\x2\x2\x168\x167\x3\x2\x2\x2\x169");
		sb.Append("\x16C\x3\x2\x2\x2\x16A\x168\x3\x2\x2\x2\x16A\x16B\x3\x2\x2\x2");
		sb.Append("\x16B\x175\x3\x2\x2\x2\x16C\x16A\x3\x2\x2\x2\x16D\x171\a\x1E");
		sb.Append("\x2\x2\x16E\x170\a\x19\x2\x2\x16F\x16E\x3\x2\x2\x2\x170\x173");
		sb.Append("\x3\x2\x2\x2\x171\x16F\x3\x2\x2\x2\x171\x172\x3\x2\x2\x2\x172");
		sb.Append("\x175\x3\x2\x2\x2\x173\x171\x3\x2\x2\x2\x174\x14E\x3\x2\x2\x2");
		sb.Append("\x174\x16D\x3\x2\x2\x2\x175\x178\x3\x2\x2\x2\x176\x174\x3\x2");
		sb.Append("\x2\x2\x176\x177\x3\x2\x2\x2\x177\x179\x3\x2\x2\x2\x178\x176");
		sb.Append("\x3\x2\x2\x2\x179\x17A\a\xE\x2\x2\x17A\x1B\x3\x2\x2\x2\x17B");
		sb.Append("\x17C\a\t\x2\x2\x17C\x17D\a\xF\x2\x2\x17D\x17E\a\x4\x2\x2\x17E");
		sb.Append("\x1D\x3\x2\x2\x2\x37\"(\x32\x38=?\x43KQTV]\x64imv|\x82\x8B\x91");
		sb.Append("\x9A\xA0\xA6\xB0\xB9\xBF\xC3\xC7\xCE\xD4\xDB\xEC\xF7\xFE\x105");
		sb.Append("\x10D\x115\x11B\x11E\x125\x12B\x132\x139\x142\x146\x152\x158");
		sb.Append("\x15E\x164\x16A\x171\x174\x176");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
